import unittest
from aind_behavior_dynamic_foraging.DataSchemas.optogenetics import (
    Optogenetics,
    IntervalConditions,
    LaserColorOne,
    LaserColorTwo,
    LaserColorThree,
    LaserColorFour,
    LaserColorFive,
    LaserColorSix,
    SessionControl,
    LocationOne,
    LocationTwo,
    SineProtocol,
    PulseProtocol,
    ConstantProtocol,
)
from aind_behavior_services.session import AindBehaviorSessionModel
from aind_behavior_dynamic_foraging.DataSchemas.task_logic import (
    AindDynamicForagingTaskLogic,
    AindDynamicForagingTaskParameters,
    AutoWater,
    AutoBlock,
    Warmup,
)
from test.resources.old_generate_trials import GenerateTrials as OldGenerateTrials
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
from src.foraging_gui.MyFunctions import GenerateTrials

from unittest.mock import patch, MagicMock
import os


class TestOptogeneticLogic(unittest.TestCase):
    """Testing TrainerServer model"""

    session_model: AindBehaviorSessionModel
    task_model: AindDynamicForagingTaskLogic

    @classmethod
    def setUp(self):
        """
        Setup models
        """

        self.session_model = session_model = AindBehaviorSessionModel(
            experiment="Coupled Baiting",
            experimenter=["the ghost in the shell"],
            date=datetime.now(),  # update when folders are created
            root_path="",  # update when created
            session_name="",  # update when date and subject are filled in
            subject="0",
            experiment_version="0.0.0",
            notes="",
        )

        self.task_model = self.task_logic = AindDynamicForagingTaskLogic(
            task_parameters=AindDynamicForagingTaskParameters(
                auto_water=AutoWater(), auto_block=AutoBlock(), warmup=Warmup()
            )
        )

    def test_sine_waveforms(self):
        """Check waveforms generated by Generate trials"""

        # create model for sine wave with both lasers
        laser = LaserColorOne(
            color="Blue",
            location=[LocationOne(power=1), LocationTwo(power=1)],
            probability=0.25,
            duration=5.0,
            condition_probability=1,
            pulse_condition="Right choice",
            start=IntervalConditions(interval_condition="Trial start", offset=0),
            end=None,
            protocol=SineProtocol(frequency=40, ramp_down=1),
        )

        # initialize opto model
        opto_model = Optogenetics(
            sample_frequency=5000,
            laser_colors=[laser],
            session_control=SessionControl(),
        )

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Both"
        old_generate_trials.TP_Laser1_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[1].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = ""
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test only laser 1
        laser.location = [LocationOne(power=1)]

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_1"
        old_generate_trials.TP_Laser1_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Laser2_power_1 = f"[0]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = ""
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test only laser 2
        laser.location = [LocationTwo(power=1)]

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = ""
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test offset
        laser.start.offset = 50

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = ""
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test offset
        laser.duration = 10

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = ""
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

    def test_pulse_waveforms(self):
        """
        Test waves performed using pulse protocol
        """

        # create model for sine wave with both lasers
        laser = LaserColorOne(
            color="Blue",
            location=[LocationOne(power=1), LocationTwo(power=1)],
            probability=0.25,
            duration=5.0,
            condition_probability=1,
            pulse_condition="Right choice",
            start=IntervalConditions(interval_condition="Trial start", offset=0),
            end=None,
            protocol=PulseProtocol(frequency=40, duration=0.002),
        )

        # initialize opto model
        opto_model = Optogenetics(
            sample_frequency=5000,
            laser_colors=[laser],
            session_control=SessionControl(),
        )

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Both"
        old_generate_trials.TP_Laser1_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[1].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = 0
        old_generate_trials.TP_PulseDur_1 = laser.protocol.duration
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test only laser 1
        laser.location = [LocationOne(power=1)]

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_1"
        old_generate_trials.TP_Laser1_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Laser2_power_1 = f"[0]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = 0
        old_generate_trials.TP_PulseDur_1 = laser.protocol.duration
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test only laser 2
        laser.location = [LocationTwo(power=1)]

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = 0
        old_generate_trials.TP_PulseDur_1 = laser.protocol.duration
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test offset
        laser.start.offset = 50

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = 0
        old_generate_trials.TP_PulseDur_1 = laser.protocol.duration
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        ## test frequency
        laser.start.offset = 0
        laser.protocol.frequency = 10

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = laser.protocol.frequency
        old_generate_trials.TP_RD_1 = 0
        old_generate_trials.TP_PulseDur_1 = laser.protocol.duration
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

    def test_constant_waveforms(self):
        """Test constant protocol waveforms"""

        # create model for sine wave with both lasers
        laser = LaserColorOne(
            color="Blue",
            location=[LocationOne(power=1), LocationTwo(power=1)],
            probability=0.25,
            duration=5.0,
            condition_probability=1,
            pulse_condition="Right choice",
            start=IntervalConditions(interval_condition="Trial start", offset=0),
            end=None,
            protocol=ConstantProtocol(ramp_down=1),
        )

        # initialize opto model
        opto_model = Optogenetics(
            sample_frequency=5000,
            laser_colors=[laser],
            session_control=SessionControl(),
        )

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Both"
        old_generate_trials.TP_Laser1_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[1].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = 0
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = 0
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test only laser 1
        laser.location = [LocationOne(power=1)]

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_1"
        old_generate_trials.TP_Laser1_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Laser2_power_1 = f"[0]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = 0
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = 0
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test only laser 2
        laser.location = [LocationTwo(power=1)]

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = 0
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = 0
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test offset
        laser.start.offset = 50

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = 0
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = 0
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # test ramp down
        laser.start.offset = 0
        laser.protocol.ramp_down = 2

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, opto_model)
        generate_trials.selected_condition = laser
        generate_trials._GetLaserWaveForm()

        # create old generate trials waveform
        old_generate_trials = OldGenerateTrials(MagicMock())
        old_generate_trials.SelctedCondition = 1
        old_generate_trials.TP_LaserColor_1 = laser.color
        old_generate_trials.TP_Location_1 = "Laser_2"
        old_generate_trials.TP_Laser1_power_1 = f"[0]"
        old_generate_trials.TP_Laser2_power_1 = f"[{laser.location[0].power}]"
        old_generate_trials.TP_Duration_1 = laser.duration
        old_generate_trials.TP_Protocol_1 = laser.protocol.name
        old_generate_trials.TP_Frequency_1 = 0
        old_generate_trials.TP_RD_1 = laser.protocol.ramp_down
        old_generate_trials.TP_PulseDur_1 = 0
        old_generate_trials.TP_LaserStart_1 = laser.start.interval_condition
        old_generate_trials.TP_OffsetStart_1 = laser.start.offset
        old_generate_trials.TP_LaserEnd_1 = "NA"
        old_generate_trials.TP_OffsetEnd_1 = 0
        old_generate_trials.TP_SampleFrequency = opto_model.sample_frequency
        old_generate_trials._GetLaserWaveForm()

        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_1, generate_trials.WaveFormLocation_1))
        self.assertTrue(np.array_equal(old_generate_trials.WaveFormLocation_2, generate_trials.WaveFormLocation_2))

        # x = np.linspace(0, laser.duration, len(old_generate_trials.WaveFormLocation_1))
        #
        # plt.figure()
        # plt.plot(x, old_generate_trials.WaveFormLocation_1)
        # plt.title("old waveform 1")
        # plt.legend()
        #
        # plt.figure()
        # plt.plot(x, generate_trials.WaveFormLocation_1)
        # plt.title("new waveform 1")
        #
        # plt.figure()
        # plt.plot(x, old_generate_trials.WaveFormLocation_2)
        # plt.title("old waveform 2")
        # plt.legend()
        #
        # plt.figure()
        # plt.plot(x, generate_trials.WaveFormLocation_2)
        # plt.title("new waveform 2")
        #
        # plt.show()
