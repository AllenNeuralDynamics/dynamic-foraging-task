import unittest
from aind_behavior_dynamic_foraging.DataSchemas.optogenetics import (
    Optogenetics,
    IntervalConditions,
    LaserColorOne,
    LaserColorTwo,
    LaserColorThree,
    LaserColorFour,
    LaserColorFive,
    LaserColorSix,
    SessionControl,
    LocationOne,
    LocationTwo
)
from aind_behavior_services.session import AindBehaviorSessionModel
from aind_behavior_dynamic_foraging.DataSchemas.task_logic import (
    AindDynamicForagingTaskLogic,
    AindDynamicForagingTaskParameters,
    AutoWater,
    AutoStop,
    AutoBlock,
    Warmup
)
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
from src.foraging_gui.MyFunctions import GenerateTrials

from unittest.mock import patch, MagicMock
import os

class TestOptogeneticLogic(unittest.TestCase):
    """ Testing TrainerServer model"""

    opto_model: Optogenetics
    session_model: AindBehaviorSessionModel
    task_model: AindDynamicForagingTaskLogic

    @classmethod
    def setUp(self):
        """
        Setup optogenetic_model
        """

        self.opto_model = Optogenetics(
                sample_frequency=5000,
                laser_colors=[
                    LaserColorOne(
                        color="Blue",
                        pulse_condition="Right choice",
                        start=IntervalConditions(
                            interval_condition="Trial start",
                            offset=0
                        ),
                        end=IntervalConditions(
                            interval_condition="Right reward",
                            offset=0
                        ),
                    ),
                    LaserColorThree(
                        color="Green",
                        location=[LocationOne()],
                        pulse_condition="Right choice",
                        start=IntervalConditions(
                            interval_condition="Trial start",
                            offset=0
                        ),
                        end=IntervalConditions(
                            interval_condition="Right reward",
                            offset=0
                        ),
                    ),
                    LaserColorFour(
                        color="Orange",
                        location=[LocationTwo()],
                        pulse_condition="Right choice",
                        start=IntervalConditions(
                            interval_condition="Trial start",
                            offset=0
                        ),
                        end=IntervalConditions(
                            interval_condition="Right reward",
                            offset=0
                        ),
                    ),

                    LaserColorSix(
                        color="Orange",
                        pulse_condition="Right choice",
                        start=IntervalConditions(
                            interval_condition="Trial start",
                            offset=0
                        ),
                        end=IntervalConditions(
                            interval_condition="Right reward",
                            offset=0
                        ),
                    ),
                ],
                session_control=SessionControl(),
            )

        self.session_model = session_model = AindBehaviorSessionModel(
            experiment="Coupled Baiting",
            experimenter=["the ghost in the shell"],
            date=datetime.now(),  # update when folders are created
            root_path="",  # update when created
            session_name="",  # update when date and subject are filled in
            subject="0",
            experiment_version="0.0.0",
            notes="",
        )

        self.task_model = self.task_logic = AindDynamicForagingTaskLogic(
            task_parameters=AindDynamicForagingTaskParameters(
                auto_water=AutoWater(),
                auto_stop=AutoStop(),
                auto_block=AutoBlock(),
                warmup=Warmup()
            )
        )

    def test_waveforms(self):
        """Check waveforms generated by Generate trials"""

        generate_trials = GenerateTrials(MagicMock(), self.task_model, self.session_model, self.opto_model)
        generate_trials.selected_condition = self.opto_model.laser_colors[0]
        generate_trials._GetLaserWaveForm()
        t = np.linspace(0, len(generate_trials.WaveFormLocation_1), len(generate_trials.WaveFormLocation_1))  # Time axis (1 second, 1000 samples)
        plt.plot(t, generate_trials.WaveFormLocation_1)
        plt.show()
        print(generate_trials.CurrentLaserAmplitude)
        print(generate_trials.WaveFormLocation_1)
        print(generate_trials.WaveFormLocation_2)

        generate_trials.selected_condition = self.opto_model.laser_colors[1]
        generate_trials._GetLaserWaveForm()
        print(generate_trials.CurrentLaserAmplitude)
        print(generate_trials.WaveFormLocation_1)
        print(generate_trials.WaveFormLocation_2)

        generate_trials.selected_condition = self.opto_model.laser_colors[2]
        generate_trials._GetLaserWaveForm()
        print(generate_trials.CurrentLaserAmplitude)
        print(generate_trials.WaveFormLocation_1)
        print(generate_trials.WaveFormLocation_2)